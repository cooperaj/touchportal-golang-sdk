// Code generated by "enumer -type=PluginEvent -json -transform=lower-camel -output plugin_events_string.go -trimprefix Event"; DO NOT EDIT.

//
package plugin

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _PluginEventName = "actionclosePlugininfosettings"

var _PluginEventIndex = [...]uint8{0, 6, 17, 21, 29}

func (i pluginEvent) String() string {
	if i < 0 || i >= pluginEvent(len(_PluginEventIndex)-1) {
		return fmt.Sprintf("PluginEvent(%d)", i)
	}
	return _PluginEventName[_PluginEventIndex[i]:_PluginEventIndex[i+1]]
}

var _PluginEventValues = []pluginEvent{0, 1, 2, 3}

var _PluginEventNames = []string{"action", "closePlugin", "info", "settings"}

var _PluginEventNameToValueMap = map[string]pluginEvent{
	_PluginEventName[0:6]:   0,
	_PluginEventName[6:17]:  1,
	_PluginEventName[17:21]: 2,
	_PluginEventName[21:29]: 3,
}

// PluginEventString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PluginEventString(s string) (pluginEvent, error) {

	if val, ok := _PluginEventNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PluginEvent values", s)
}

func ParsePluginEvent(s string) (pluginEvent, error) {
	return PluginEventString(s)
}

// PluginEventValues returns all values of the enum
func PluginEventValues() []pluginEvent {
	return _PluginEventValues
}

func PluginEventNames() []string {
	return _PluginEventNames
}

// IsAPluginEvent returns "true" if the value is listed in the enum definition. "false" otherwise
func (i pluginEvent) IsAPluginEvent() bool {
	for _, v := range _PluginEventValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PluginEvent
func (i pluginEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PluginEvent
func (i *pluginEvent) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PluginEvent should be a string, got %s", data)
	}

	var err error
	*i, err = PluginEventString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for PluginEvent
func (i pluginEvent) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PluginEvent
func (i *pluginEvent) UnmarshalText(text []byte) error {
	var err error
	*i, err = PluginEventString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for PluginEvent
func (i pluginEvent) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for PluginEvent
func (i *pluginEvent) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PluginEventString(s)
	return err
}

func (i pluginEvent) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *pluginEvent) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := PluginEventString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
