// Code generated by MockGen. DO NOT EDIT.
// Source: go.acpr.dev/touchportal-golang-sdk/pkg/plugin (interfaces: PluginClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "go.acpr.dev/touchportal-golang-sdk/pkg/client"
)

// MockPluginClient is a mock of PluginClient interface.
type MockPluginClient struct {
	ctrl     *gomock.Controller
	recorder *MockPluginClientMockRecorder
}

// MockPluginClientMockRecorder is the mock recorder for MockPluginClient.
type MockPluginClientMockRecorder struct {
	mock *MockPluginClient
}

// NewMockPluginClient creates a new mock instance.
func NewMockPluginClient(ctrl *gomock.Controller) *MockPluginClient {
	mock := &MockPluginClient{ctrl: ctrl}
	mock.recorder = &MockPluginClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginClient) EXPECT() *MockPluginClientMockRecorder {
	return m.recorder
}

// AddMessageHandler mocks base method.
func (m *MockPluginClient) AddMessageHandler(arg0 client.ClientMessageType, arg1 func(interface{})) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMessageHandler", arg0, arg1)
}

// AddMessageHandler indicates an expected call of AddMessageHandler.
func (mr *MockPluginClientMockRecorder) AddMessageHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageHandler", reflect.TypeOf((*MockPluginClient)(nil).AddMessageHandler), arg0, arg1)
}

// Close mocks base method.
func (m *MockPluginClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPluginClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPluginClient)(nil).Close))
}

// Dispatch mocks base method.
func (m *MockPluginClient) Dispatch(arg0 client.ClientMessageType, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", arg0, arg1)
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockPluginClientMockRecorder) Dispatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockPluginClient)(nil).Dispatch), arg0, arg1)
}

// Ready mocks base method.
func (m *MockPluginClient) Ready() <-chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(<-chan bool)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockPluginClientMockRecorder) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockPluginClient)(nil).Ready))
}

// Run mocks base method.
func (m *MockPluginClient) Run(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockPluginClientMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPluginClient)(nil).Run), arg0)
}

// SendMessage mocks base method.
func (m *MockPluginClient) SendMessage(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockPluginClientMockRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockPluginClient)(nil).SendMessage), arg0)
}
