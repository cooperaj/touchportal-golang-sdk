// Code generated by "enumer -type=ClientMessageType -json -transform=lower-camel -output types_string.go -trimprefix MessageType"; DO NOT EDIT.

//
package client

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _ClientMessageTypeName = "actionclosePlugininfopairsettingsstateUpdate"

var _ClientMessageTypeIndex = [...]uint8{0, 6, 17, 21, 25, 33, 44}

func (i ClientMessageType) String() string {
	if i < 0 || i >= ClientMessageType(len(_ClientMessageTypeIndex)-1) {
		return fmt.Sprintf("ClientMessageType(%d)", i)
	}
	return _ClientMessageTypeName[_ClientMessageTypeIndex[i]:_ClientMessageTypeIndex[i+1]]
}

var _ClientMessageTypeValues = []ClientMessageType{0, 1, 2, 3, 4, 5}

var _ClientMessageTypeNames = []string{"action", "closePlugin", "info", "pair", "settings", "stateUpdate"}

var _ClientMessageTypeNameToValueMap = map[string]ClientMessageType{
	_ClientMessageTypeName[0:6]:   0,
	_ClientMessageTypeName[6:17]:  1,
	_ClientMessageTypeName[17:21]: 2,
	_ClientMessageTypeName[21:25]: 3,
	_ClientMessageTypeName[25:33]: 4,
	_ClientMessageTypeName[33:44]: 5,
}

// ClientMessageTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ClientMessageTypeString(s string) (ClientMessageType, error) {

	if val, ok := _ClientMessageTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ClientMessageType values", s)
}

func ParseClientMessageType(s string) (ClientMessageType, error) {
	return ClientMessageTypeString(s)
}

// ClientMessageTypeValues returns all values of the enum
func ClientMessageTypeValues() []ClientMessageType {
	return _ClientMessageTypeValues
}

func ClientMessageTypeNames() []string {
	return _ClientMessageTypeNames
}

// IsAClientMessageType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ClientMessageType) IsAClientMessageType() bool {
	for _, v := range _ClientMessageTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ClientMessageType
func (i ClientMessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ClientMessageType
func (i *ClientMessageType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ClientMessageType should be a string, got %s", data)
	}

	var err error
	*i, err = ClientMessageTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ClientMessageType
func (i ClientMessageType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ClientMessageType
func (i *ClientMessageType) UnmarshalText(text []byte) error {
	var err error
	*i, err = ClientMessageTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for ClientMessageType
func (i ClientMessageType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ClientMessageType
func (i *ClientMessageType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ClientMessageTypeString(s)
	return err
}

func (i ClientMessageType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ClientMessageType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ClientMessageTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
